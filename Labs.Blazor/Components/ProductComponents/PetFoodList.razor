@implements IDisposable
@rendermode InteractiveServer

<h3>Список кормов</h3>

@if (ProductService.Products != null && ProductService.Products.Count() != 0) 
{
    <table class="table table-striped"> 
        <thead> 
            <tr>
                <th>Название</th>
                <th></th> 
            </tr>
        </thead>
        <tbody>
            @foreach (var item in ProductService.Products)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>
                        <button class="btn btn-outline-dark"
                        @onclick="@(()=>OnPetFoodSelected(item.Id))"> Подробно
                        </button>
                    </td>
                </tr>
            }
        </tbody>           
    </table>
}

@code 
{
    [CascadingParameter]
    public IProductService<PetFood> ProductService { get; set; } = default!;

    [Parameter] 
    public EventCallback<int> PetFoodSelected { get; set; }

    protected override void OnInitialized() 
    { 
        ProductService.ListChanged += StateHasChanged; 
    }

    public async Task OnPetFoodSelected(int id) 
    { 
        await PetFoodSelected.InvokeAsync(id); 
    }
    public void Dispose() 
    { 
        ProductService.ListChanged -= StateHasChanged; 
    }
}