@implements IDisposable 
@rendermode InteractiveServer 

<div class="btn-group" role="group" aria-label="Pager"> 
    <!-- Кнопка Previous -->
    <button type="button" class="btn btn-outline-primary @(previousEnabled ? "" : "disabled")" 
        @onclick="@(e => OnPageSelected(ProductService.CurrentPage-1))"> 
        <span aria-hidden="true">&laquo;</span> 
    </button> 

    @for (int i = 1; i <= ProductService.TotalPages; i++)
    {
        var pageIndex = i; // обязательно локальная переменная

        <button type="button"
                class="btn btn-outline-primary @(IsActive(pageIndex) ? "active" : "")"
                @onclick="@(e => OnPageSelected(pageIndex))">
            @pageIndex
        </button>
    }

    <!-- Кнопка Next --> 
    <button type="button" class="btn btn-outline-primary @(nextEnabled ? "" : "disabled")"
            @onclick="@(e=>OnPageSelected(ProductService.CurrentPage+1))"> 
        <span aria-hidden="true">&raquo;</span> 
    </button> 
</div>

@code 
{
    [CascadingParameter]
    public IProductService<PetFood> ProductService { get; set; } = default!;

    protected override void OnInitialized() 
    { 
        ProductService.ListChanged += StateHasChanged;
    } 
    
    // Кнопка Previous доступна?      
    private bool previousEnabled { get => ProductService.CurrentPage != 1; } 

    // Кнопка Next доступна 
    private bool nextEnabled { get => ProductService.CurrentPage != ProductService.TotalPages; } 

    // Это текущая страница? 
    private bool IsActive(int pageNo) => pageNo == ProductService.CurrentPage;

    // Обработчик клика кнопки 
    private async Task OnPageSelected(int pageNo) 
    {         
        await ProductService.GetProducts(pageNo); 
    } 

    public void Dispose() 
    { 
        ProductService.ListChanged -= StateHasChanged; 
    } 
}
